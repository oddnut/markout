/*
	DocumentSourceGenerator.java
	
	Author: David Fogel
	
	Copyright 2004-2007 David Fogel
	
	All rights reserved.
*/

// *** package ***
package net.markout.oldgen;

// *** imports ***
import java.io.*;
import java.util.ArrayList;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.*;
import org.xml.sax.ext.LexicalHandler;

import net.markout.types.XMLChar;

/**
 * DocumentSourceGenerator
 *
 * Comment here.  Author: David Fogel
 */
public class DocumentSourceGenerator {
	// *** Class Members ***
	
	private static Logger LOG = LoggerFactory.getLogger(DocumentSourceGenerator.class);

	// *** Instance Members ***
	
	private String thePackage;
	private String theClassName;
	
	private byte[] theBytes;
	
	private Writer theOut;

	// *** Constructors ***
	
	public DocumentSourceGenerator(String packageName, String className) {
		thePackage = packageName;
		theClassName = className;
	}

	// *** Interface Methods ***

	// *** Public Methods ***
	
	public void read(InputStream xmlIn) throws IOException{
		ByteArrayOutputStream bout = new ByteArrayOutputStream();
		byte[] buf = new byte[1000];
		int read = 0;
		while(read >= 0) {
			read = xmlIn.read(buf);
			if (read > 0)
				bout.write(buf, 0, read);
		}
		xmlIn.close();
		
		theBytes = bout.toByteArray();
	}
	
	public void generate(Writer out) throws SAXException, ParserConfigurationException, IOException {
		
		theOut = out;
		
		out.write("/*This File generated by DocumentSourceGenerator*/\n\n");
		out.write("package ");
		out.write(thePackage);
		out.write(";\n\n");
		out.write("import net.markout.*;\n");
		out.write("import net.markout.support.*;\n");
		out.write("import net.markout.types.*;\n");
		out.write("import java.io.*;\n");
		out.write("import java.util.*;\n");
		out.write("\n\n");
		
		out.write("public class ");
		out.write(theClassName);
		out.write(" extends GeneratedSourceDocument {\n\n");
		
		out.write("public void writeTo(DocumentWriter dw) throws IOException {\n\n");
		
		processXML();
		
		out.write("}\n");
		
		out.write("}\n\n");
		
		out.close();
	}

	// *** Protected Methods ***

	// *** Package Methods ***

	// *** Private Methods ***
	
	private void processXML() throws SAXException, ParserConfigurationException, IOException {
		XMLReader xmlr = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
		//XMLReader xmlr = new SAXParser();
		
		Handler handler = new Handler();
		
		xmlr.setContentHandler(handler);
		xmlr.setErrorHandler(handler);
		xmlr.setProperty("http://xml.org/sax/properties/lexical-handler", handler);

		xmlr.setFeature("http://xml.org/sax/features/validation", false);
		xmlr.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		
		xmlr.parse(new InputSource(new ByteArrayInputStream(theBytes)));
	}

	// *** Private Classes ***
	
	private class Handler implements ContentHandler, ErrorHandler, LexicalHandler {
		
		private Locator theLocator;
		
		private ArrayList<String> theElWriterNames;
		private int theLevel;
		
		public Handler() {
			theElWriterNames = new ArrayList<String>();
			theLevel = -1;
		}
		
		// *** ContentHandler Methods ***
		
		public void setDocumentLocator (Locator locator) {
			theLocator = locator;
		}
		
		public void startDocument () throws SAXException {
			writeln("dw.xmlVersion();");
		}
		
		public void endDocument() throws SAXException {
			writeln("dw.close();");
		}
		
		public void startPrefixMapping (String prefix, String uri) throws SAXException {
			// ignore
		}
		
		public void endPrefixMapping (String prefix) throws SAXException {
			// ignore
		}
		
		public void startElement (String namespaceURI, String localName,
				String qName, org.xml.sax.Attributes atts) throws SAXException {
			
			write("\n"); // add an empty line;
			
			String ew;
			
			if (theLevel < 0) {
				
				ew = "root";
				
				theElWriterNames.add(ew);
				
				write("ElementWriter ");
				write(ew);
				write(" = dw.rootElementWriter(el(\"");
				write(qName);
				writeln("\"));");
				
			} else {
				
				String parentEW = theElWriterNames.get(theLevel);
				
				boolean declare = false;
				if (theElWriterNames.size() <= theLevel + 1) {// i.e. theLevel is last one
					theElWriterNames.add("ew" + (theLevel+1));
					declare = true;
				}
				
				ew = theElWriterNames.get(theLevel + 1);
				
				if (declare)
					write("ElementWriter ");
				write(ew);
				write(" = ");
				write(parentEW);
				write(".content().elementWriter(el(\"");
				write(qName);
				writeln("\"));");
			}
			
			int n = atts.getLength();
			for (int i = 0 ; i < n ; i++) {
				write(ew);
				write(".attribute(att(\"");
				write(atts.getQName(i));
				write("\").att(\"");
				write(atts.getValue(i));
				writeln("\"));");
			}
			
			theLevel++;
		}
		
		public void endElement (String namespaceURI, String localName, String qName) throws SAXException {
			
			theLevel--;
		}
		
		public void characters (char ch[], int start, int length) throws SAXException {
			
			if (theLevel < 0) {
				// this shouldn't happen, because characters should only
				// arrive at element content.  I think.
				LOG.warn("Got characters outside of root element, converting to comment, {}", 
						getLocationString());
				
				writeln("// *** WARNING ***");
				writeln("// got character data outside of element content! " + getLocationString());
				
				return;
			}
			
			boolean isReallyWhitespace = true;
			for (int i = start ; i < (start + length) ; i++) {
				if ( ! XMLChar.isWhiteSpaceChar(ch[i])) {
					isReallyWhitespace = false;
					break;
				}
			}
			
			String ew = theElWriterNames.get(theLevel);
			
			if (isReallyWhitespace) {
				
				write(ew);
				write(".content().space(sp(");
				writeSafeQuotedJavaString(ch, start, length);
				writeln("));");
				
			} else {
				
				write(ew);
				write(".content().text(");
				writeSafeQuotedJavaString(ch, start, length);
				writeln(");");
			}
		}
		
		public void ignorableWhitespace (char ch[], int start, int length) throws SAXException {
			
			if (theLevel < 0) {
				
				write("dw.space(sp(");
				writeSafeQuotedJavaString(ch, start, length);
				writeln("));");
				
			} else {
				
				String ew = theElWriterNames.get(theLevel);
				write(ew);
				write(".content().space(sp(");
				writeSafeQuotedJavaString(ch, start, length);
				writeln("));");
			}
		}
		
		public void processingInstruction (String target, String data) throws SAXException {
			
			if (theLevel < 0) {
				// theDocWriter.pi(new Target(target), new Instruction(data));
				write("dw.pi(new Target(");
				writeSafeQuotedJavaString(target.toCharArray(), 0, target.length());
				write("),\n\tnew Instruction(");
				writeSafeQuotedJavaString(data.toCharArray(), 0, data.length());
				writeln("));");
				
			} else {
				// ew.content().pi(new Target(target), new Instruction(data));
				String ew = theElWriterNames.get(theLevel);
				write(ew);
				write(".content().pi(new Target(");
				writeSafeQuotedJavaString(target.toCharArray(), 0, target.length());
				write("),\n\tnew Instruction(");
				writeSafeQuotedJavaString(data.toCharArray(), 0, data.length());
				writeln("));");
			}
		}
		
		public void skippedEntity (String name) throws SAXException {
			
			if (theLevel < 0) {
				
				writeln("// *** WARNING ***");
				writeln("// skipped entity " + name + " " + getLocationString());
				
			} else {
				// not sure if this is right.  going to try:
				String ew = theElWriterNames.get(theLevel);
				write(ew);
				write(".content().reference(ref(\"");
				write(name);
				writeln("\")); // reference");
			}
		}
		
		// *** LexicalHandler Methods ***
		
		public void startDTD (String name, String publicId, String systemId) throws SAXException {
			//theDTDWriter = theDocWriter.dtd(	new Name(name), 
												//new PublicIDLiteral(publicId), 
												//new SystemLiteral(systemId));
			write("dw.dtd(el(\"");
			write(name);
			write("\"),\n\tnew PublicIDLiteral(\"");
			write(publicId);
			write("\"),\n\tnew SystemLiteral(\"");
			write(systemId);
			writeln("\"));");
		}
		
		public void endDTD () throws SAXException {
			// ignore for now;
		}
		
		public void startEntity (String name) throws SAXException {
			// ignore for now;
		}
		
		public void endEntity (String name) throws SAXException {
			// ignore for now;			
		}
		
		public void startCDATA () throws SAXException {
			//ignore
		}
		
		public void endCDATA () throws SAXException {
			//ignore
		}
		
		public void comment (char ch[], int start, int length) throws SAXException {
			
			if (theLevel < 0) {
				
				write("dw.comment(new Comment(");
				writeSafeQuotedJavaString(ch, start, length);
				writeln("));");
				
			} else {
				
				String ew = theElWriterNames.get(theLevel);
				write(ew);
				write(".content().comment(new Comment(");
				writeSafeQuotedJavaString(ch, start, length);
				writeln("));");
			}
		}
		
		// *** ErrorHandler Methods ***
		
		public void warning (SAXParseException exception) throws SAXException {
			//LOG.warn("SAXParser warning {}", getLocationString(), exception);
		}
		
		public void error (SAXParseException exception) throws SAXException {
			LOG.error("SAXParser error {}", getLocationString(), exception);
		}
		
		public void fatalError (SAXParseException exception) throws SAXException {
			LOG.error("Fatal SAXParser error {}", getLocationString(), exception);
		}
		
		private String getLocationString() {
			if (theLocator != null)
				return " (line " + theLocator.getLineNumber() + 
				", column " + theLocator.getColumnNumber() + ") ";
			return " (unknown location) ";
		}
		
		private void write(String s) {
			try {
				theOut.write(s);
			} catch (IOException e) {}
		}
		
		private void writeln(String s) {
			try {
				theOut.write(s);
				theOut.write("\n");
			} catch (IOException e) {}
		}
		
		private void writeSafeQuotedJavaString(char[] ca, int start, int length) {
			try {
				//int linemax = 60;
				
				int count = 0;
				int max = start + length;
				for (int i = start ; i < max ; i++, count++) {
					if (count == 0) {
						if (i == start)
							theOut.write("\""); // first line
						else
							theOut.write("\" + \n\t\"");  // next lines
					}
					char c = ca[i];
					switch (c) {
						case '"' :
							theOut.write("\\\"");
							break;
						
						case '\r':
							theOut.write("\\r");
							break;
							
						case '\n':
							theOut.write("\\n");
							break;
							
						case '\t':
							theOut.write("\\t");
							break;
							
						case '\\':
							theOut.write("\\\\");
							break;
						
						default:
							theOut.write(c);
					}
				}
				theOut.write("\"");
				
			} catch (IOException e) {}
		}
	}
}










/* end */